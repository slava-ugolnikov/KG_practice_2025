import pandas as pd
import spacy
from itertools import combinations
from sklearn.metrics import precision_score, recall_score, f1_score
from spacy.training import offsets_to_biluo_tags, biluo_to_iob
import logging

class ClassicNER:
    def __init__(self):
        self.label_map = {
            'B-ORG': 'B-ORG', 'O': 'O', 'I-ORG': 'I-ORG', 'B-NORP': 'B-MISC',
            'B-PERSON': 'B-PER', 'I-PERSON': 'I-PER', 'B-LOC': 'B-LOC', 'B-GPE': 'B-LOC',
            'B-DATE': 'B-MISC', 'I-DATE': 'I-MISC', 'B-CARDINAL': 'B-MISC', 'I-CARDINAL': 'I-MISC',
            'B-QUANTITY': 'B-MISC', 'I-QUANTITY': 'I-MISC', 'B-PERCENT': 'B-MISC', 'I-PERCENT': 'I-MISC',
            'B-MONEY': 'B-MISC', 'I-MONEY': 'I-MISC', 'B-LANGUAGE': 'B-MISC', 'B-TIME': 'B-MISC',
            'I-TIME': 'I-MISC', 'B-ORDINAL': 'B-MISC', 'B-EVENT': 'B-MISC', 'I-EVENT': 'I-MISC',
            'B-PRODUCT': 'B-MISC', 'I-GPE': 'I-LOC', 'I-LOC': 'I-LOC', 'I-NORP': 'I-MISC',
            'B-FAC': 'B-MISC', 'I-FAC': 'I-MISC', 'B-LAW': 'B-MISC', 'I-LAW': 'I-MISC',
            'B-WORK_OF_ART': 'B-MISC', 'I-WORK_OF_ART': 'I-MISC', 'I-PRODUCT': 'I-MISC'
        }

    def load_data(self, conll_df):
        self.df_conll = conll_df
        self.sentences = conll_df.groupby('Sentence_ID')['Entity'].apply(lambda x: ' '.join(x)).tolist()

    def evaluate(self):
        nlp = spacy.load("en_core_web_sm")
        docs = []
        for i, sentence in enumerate(self.sentences):
            doc = nlp(sentence)
            docs.append((i, doc))

        # Собираем сущности
        spacy_entities = []
        for doc_id, doc in docs:
            for ent in doc.ents:
                spacy_entities.append({
                    'Sentence_ID': doc_id,
                    'Entity': ent,
                    'Label': ent.label_,
                    'Start': ent.start_char,
                    'End': ent.end_char
                })
        df_spacy = pd.DataFrame(spacy_entities)

        # Преобразуем в BIO формат
        texts = {doc_id: doc.text for doc_id, doc in docs}
        nlp_blank = spacy.blank("en")
        all_data = []

        for sent_id, group in df_spacy.groupby('Sentence_ID'):
            text = texts[sent_id]
            doc = nlp_blank.make_doc(text)
            entities = [(row['Start'], row['End'], row['Label']) for _, row in group.iterrows()]
            biluo_tags = offsets_to_biluo_tags(doc, entities)
            bio_tags = biluo_to_iob(biluo_tags)
            for token, bio in zip(doc, bio_tags):
                all_data.append({
                    'Sentence_ID': sent_id,
                    'Entity': token.text,
                    'BIO_Label': self.label_map.get(bio, 'O')
                })

        df_spacy_bio = pd.DataFrame(all_data)

        # Сравнение
        merged = pd.merge(self.df_conll, df_spacy_bio, on=['Sentence_ID', 'Entity'], how='inner')
        precision = precision_score(merged['Label'], merged['BIO_Label'], average='weighted')
        recall = recall_score(merged['Label'], merged['BIO_Label'], average='weighted')
        f1 = f1_score(merged['Label'], merged['BIO_Label'], average='weighted')

        logging.info(f"[ClassicNER] Precision: {precision:.4f}")
        logging.info(f"[ClassicNER] Recall: {recall:.4f}")
        logging.info(f"[ClassicNER] F1 Score: {f1:.4f}")

        return {
            "precision": precision,
            "recall": recall,
            "f1": f1
        }
