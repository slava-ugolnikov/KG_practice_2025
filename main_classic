{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyOPtLhZy4gw0kshqOpDKwQ/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/slava-ugolnikov/KG_practice_2025/blob/main/main_classic\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Nested NER: Classical and LLM-driven approaches of extraction"
      ],
      "metadata": {
        "id": "KUwPfVGk3WKS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%pip install svgling"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "881ynyjqu939",
        "outputId": "99bc596f-928f-40c7-9ce7-101329c564ab"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting svgling\n",
            "  Downloading svgling-0.5.0-py3-none-any.whl.metadata (7.4 kB)\n",
            "Collecting svgwrite (from svgling)\n",
            "  Downloading svgwrite-1.4.3-py3-none-any.whl.metadata (8.8 kB)\n",
            "Downloading svgling-0.5.0-py3-none-any.whl (31 kB)\n",
            "Downloading svgwrite-1.4.3-py3-none-any.whl (67 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m67.1/67.1 kB\u001b[0m \u001b[31m5.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: svgwrite, svgling\n",
            "Successfully installed svgling-0.5.0 svgwrite-1.4.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%pip install opendatasets"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UzUgfiXBxTuR",
        "outputId": "dd89fbf6-c6df-40be-a6e2-dc14b3f54160"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting opendatasets\n",
            "  Downloading opendatasets-0.1.22-py3-none-any.whl.metadata (9.2 kB)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from opendatasets) (4.67.1)\n",
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.11/dist-packages (from opendatasets) (1.7.4.2)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from opendatasets) (8.1.8)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.11/dist-packages (from kaggle->opendatasets) (6.2.0)\n",
            "Requirement already satisfied: certifi>=14.05.14 in /usr/local/lib/python3.11/dist-packages (from kaggle->opendatasets) (2025.1.31)\n",
            "Requirement already satisfied: charset-normalizer in /usr/local/lib/python3.11/dist-packages (from kaggle->opendatasets) (3.4.1)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from kaggle->opendatasets) (3.10)\n",
            "Requirement already satisfied: protobuf in /usr/local/lib/python3.11/dist-packages (from kaggle->opendatasets) (5.29.4)\n",
            "Requirement already satisfied: python-dateutil>=2.5.3 in /usr/local/lib/python3.11/dist-packages (from kaggle->opendatasets) (2.8.2)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.11/dist-packages (from kaggle->opendatasets) (8.0.4)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from kaggle->opendatasets) (2.32.3)\n",
            "Requirement already satisfied: setuptools>=21.0.0 in /usr/local/lib/python3.11/dist-packages (from kaggle->opendatasets) (75.2.0)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.11/dist-packages (from kaggle->opendatasets) (1.17.0)\n",
            "Requirement already satisfied: text-unidecode in /usr/local/lib/python3.11/dist-packages (from kaggle->opendatasets) (1.3)\n",
            "Requirement already satisfied: urllib3>=1.15.1 in /usr/local/lib/python3.11/dist-packages (from kaggle->opendatasets) (2.3.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from kaggle->opendatasets) (0.5.1)\n",
            "Downloading opendatasets-0.1.22-py3-none-any.whl (15 kB)\n",
            "Installing collected packages: opendatasets\n",
            "Successfully installed opendatasets-0.1.22\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import nltk\n",
        "import opendatasets as od\n",
        "import pandas as pd\n",
        "import spacy\n",
        "import networkx as nx\n",
        "import matplotlib.pyplot as plt\n",
        "from spacy import displacy\n",
        "from itertools import combinations\n",
        "\n",
        "nltk.download('punkt_tab')\n",
        "nltk.download('averaged_perceptron_tagger_eng')\n",
        "nltk.download('maxent_ne_chunker_tab')\n",
        "nltk.download('words')"
      ],
      "metadata": {
        "id": "vUHhypFSliCE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "99c4eed3-d040-4374-8210-685a6fbc43b4"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt_tab.zip.\n",
            "[nltk_data] Downloading package averaged_perceptron_tagger_eng to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Unzipping taggers/averaged_perceptron_tagger_eng.zip.\n",
            "[nltk_data] Downloading package maxent_ne_chunker_tab to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Unzipping chunkers/maxent_ne_chunker_tab.zip.\n",
            "[nltk_data] Downloading package words to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/words.zip.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Dataset"
      ],
      "metadata": {
        "id": "gEyA8WZg9omi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "CoNLL-2003 is a dataset designed for NER.\n",
        "\n",
        "The English data was taken from the Reuters Corpus. This corpus consists of Reuters news stories between August 1996 and August 1997."
      ],
      "metadata": {
        "id": "h9Y_FWqppzQx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "od.download(\n",
        "    \"https://www.kaggle.com/datasets/alaakhaled/conll003-englishversion/data\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ydIFCvbVxVef",
        "outputId": "44ec7d82-4a17-4397-a5c7-e74cfbd5acfd"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please provide your Kaggle credentials to download this dataset. Learn more: http://bit.ly/kaggle-creds\n",
            "Your Kaggle username: slavaugolnikov\n",
            "Your Kaggle Key: ··········\n",
            "Dataset URL: https://www.kaggle.com/datasets/alaakhaled/conll003-englishversion\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "conll = open('/content/conll003-englishversion/train.txt', 'r').read()\n",
        "conll[:160]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "sCxrq-6r9AIG",
        "outputId": "909a3ddd-a03a-47f7-e291-6e1fa2036efb"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'-DOCSTART- -X- -X- O\\n\\nEU NNP B-NP B-ORG\\nrejects VBZ B-VP O\\nGerman JJ B-NP B-MISC\\ncall NN I-NP O\\nto TO B-VP O\\nboycott VB I-VP O\\nBritish JJ B-NP B-MISC\\nlamb NN I-'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As we can see the dataset is presented in a text format so let us write the function that would convert dataset from text to a more convenient datatype (nested datatype)."
      ],
      "metadata": {
        "id": "rXAnpIRr9RJN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def load_sentences(filepath):\n",
        "    final = []\n",
        "    sentences = []\n",
        "\n",
        "    with open(filepath, 'r') as f:\n",
        "        for line in f.readlines():\n",
        "            if line == '-DOCSTART- -X- -X- O\\n' or line == '\\n':\n",
        "                if len(sentences) > 0:\n",
        "                    final.append(sentences)\n",
        "                    sentences = []\n",
        "            else:\n",
        "                l = line.split(' ')\n",
        "                sentences.append((l[0], l[3].strip('\\n')))\n",
        "\n",
        "    return final"
      ],
      "metadata": {
        "id": "QlSCyXKA45Kd"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The dataset is already divided into train, validation and test samples."
      ],
      "metadata": {
        "id": "SFyGZUnyImXp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "conll_train = load_sentences('/content/conll003-englishversion/train.txt')\n",
        "conll_test = load_sentences('/content/conll003-englishversion/test.txt')\n",
        "conll_valid = load_sentences('/content/conll003-englishversion/valid.txt')"
      ],
      "metadata": {
        "id": "OIG0Ik-35gam",
        "collapsed": true
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "samples = conll_train + conll_test\n",
        "\n",
        "schema = sorted({tag for sentence in samples for _, tag in sentence})\n",
        "schema"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kzMm_n1BS1Y8",
        "outputId": "3d695be8-7e0a-408f-d5b7-686eb45552b4"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['B-LOC', 'B-MISC', 'B-ORG', 'B-PER', 'I-LOC', 'I-MISC', 'I-ORG', 'I-PER', 'O']"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "BIO-разметка\n",
        "* B - начало сущности\n",
        "* I - сущность внутри (вторая подряд именованная сущность, относящаяся к предыдущей)\n",
        "* O - не сущность\n",
        "------\n",
        "* LOC - место\n",
        "* ORG - организация\n",
        "* PER - человек\n",
        "* MISC - разное\n"
      ],
      "metadata": {
        "id": "iyOAFgCxDpKZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's look what's inside conll_train"
      ],
      "metadata": {
        "id": "Vg-AaKt4_Szo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "conll_train[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pzLm0BW_B2ag",
        "outputId": "8df13aee-185e-4298-c4ef-bae998b9510c"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('EU', 'B-ORG'),\n",
              " ('rejects', 'O'),\n",
              " ('German', 'B-MISC'),\n",
              " ('call', 'O'),\n",
              " ('to', 'O'),\n",
              " ('boycott', 'O'),\n",
              " ('British', 'B-MISC'),\n",
              " ('lamb', 'O'),\n",
              " ('.', 'O')]"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Then we would apply this to make a DataFrame."
      ],
      "metadata": {
        "id": "0MbMmww-_Yna"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rows = []\n",
        "\n",
        "for i, sentence in enumerate(conll_train):\n",
        "    for word, label in sentence:\n",
        "        rows.append({\"Sentence_ID\": i, \"Entity\": word, \"Label\": label})\n",
        "\n",
        "df = pd.DataFrame(rows)\n",
        "df.iloc[43:73]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 990
        },
        "id": "5Q5X7ZFwnLOk",
        "outputId": "9532e3b1-6343-4076-b361-982b1294d92e"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Sentence_ID          Entity  Label\n",
              "43            4         Germany  B-LOC\n",
              "44            4              's      O\n",
              "45            4  representative      O\n",
              "46            4              to      O\n",
              "47            4             the      O\n",
              "48            4        European  B-ORG\n",
              "49            4           Union  I-ORG\n",
              "50            4              's      O\n",
              "51            4      veterinary      O\n",
              "52            4       committee      O\n",
              "53            4          Werner  B-PER\n",
              "54            4       Zwingmann  I-PER\n",
              "55            4            said      O\n",
              "56            4              on      O\n",
              "57            4       Wednesday      O\n",
              "58            4       consumers      O\n",
              "59            4          should      O\n",
              "60            4             buy      O\n",
              "61            4       sheepmeat      O\n",
              "62            4            from      O\n",
              "63            4       countries      O\n",
              "64            4           other      O\n",
              "65            4            than      O\n",
              "66            4         Britain  B-LOC\n",
              "67            4           until      O\n",
              "68            4             the      O\n",
              "69            4      scientific      O\n",
              "70            4          advice      O\n",
              "71            4             was      O\n",
              "72            4         clearer      O"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0c795c9c-b826-4846-95c3-6a1daf107de4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sentence_ID</th>\n",
              "      <th>Entity</th>\n",
              "      <th>Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>4</td>\n",
              "      <td>Germany</td>\n",
              "      <td>B-LOC</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>4</td>\n",
              "      <td>'s</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>4</td>\n",
              "      <td>representative</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>4</td>\n",
              "      <td>to</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>4</td>\n",
              "      <td>the</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>4</td>\n",
              "      <td>European</td>\n",
              "      <td>B-ORG</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>4</td>\n",
              "      <td>Union</td>\n",
              "      <td>I-ORG</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>4</td>\n",
              "      <td>'s</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>4</td>\n",
              "      <td>veterinary</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>4</td>\n",
              "      <td>committee</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>4</td>\n",
              "      <td>Werner</td>\n",
              "      <td>B-PER</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>4</td>\n",
              "      <td>Zwingmann</td>\n",
              "      <td>I-PER</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>4</td>\n",
              "      <td>said</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>4</td>\n",
              "      <td>on</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>4</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>4</td>\n",
              "      <td>consumers</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>4</td>\n",
              "      <td>should</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>4</td>\n",
              "      <td>buy</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>4</td>\n",
              "      <td>sheepmeat</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>4</td>\n",
              "      <td>from</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>4</td>\n",
              "      <td>countries</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>4</td>\n",
              "      <td>other</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>4</td>\n",
              "      <td>than</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>4</td>\n",
              "      <td>Britain</td>\n",
              "      <td>B-LOC</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>4</td>\n",
              "      <td>until</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>68</th>\n",
              "      <td>4</td>\n",
              "      <td>the</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>4</td>\n",
              "      <td>scientific</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>4</td>\n",
              "      <td>advice</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>4</td>\n",
              "      <td>was</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>4</td>\n",
              "      <td>clearer</td>\n",
              "      <td>O</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c795c9c-b826-4846-95c3-6a1daf107de4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0c795c9c-b826-4846-95c3-6a1daf107de4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0c795c9c-b826-4846-95c3-6a1daf107de4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ab12a481-8219-4bed-88f5-039bee08c785\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ab12a481-8219-4bed-88f5-039bee08c785')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ab12a481-8219-4bed-88f5-039bee08c785 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 30,\n  \"fields\": [\n    {\n      \"column\": \"Sentence_ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 4,\n        \"max\": 4,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Entity\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          \"Werner\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"B-LOC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[df['Label'] == 'I-ORG'].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "WnpvOVy6_7IT",
        "outputId": "21c55745-ccc5-489d-c049-199256057d1c"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Sentence_ID      Entity  Label\n",
              "15             3  Commission  I-ORG\n",
              "49             4       Union  I-ORG\n",
              "130            6       Union  I-ORG\n",
              "388           16    National  I-ORG\n",
              "389           16     Farmers  I-ORG"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b7909a2f-c5a8-4da9-beb6-636fa1d7d256\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sentence_ID</th>\n",
              "      <th>Entity</th>\n",
              "      <th>Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>3</td>\n",
              "      <td>Commission</td>\n",
              "      <td>I-ORG</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>4</td>\n",
              "      <td>Union</td>\n",
              "      <td>I-ORG</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>130</th>\n",
              "      <td>6</td>\n",
              "      <td>Union</td>\n",
              "      <td>I-ORG</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>388</th>\n",
              "      <td>16</td>\n",
              "      <td>National</td>\n",
              "      <td>I-ORG</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>389</th>\n",
              "      <td>16</td>\n",
              "      <td>Farmers</td>\n",
              "      <td>I-ORG</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b7909a2f-c5a8-4da9-beb6-636fa1d7d256')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b7909a2f-c5a8-4da9-beb6-636fa1d7d256 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b7909a2f-c5a8-4da9-beb6-636fa1d7d256');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-aef48b0d-5210-4f6c-b94c-3a6689a7685e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aef48b0d-5210-4f6c-b94c-3a6689a7685e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-aef48b0d-5210-4f6c-b94c-3a6689a7685e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[df['Label'] == 'I-ORG']\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Sentence_ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 3,\n        \"max\": 16,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4,\n          16,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Entity\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Union\",\n          \"Farmers\",\n          \"Commission\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"I-ORG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Task description"
      ],
      "metadata": {
        "id": "YFr9MY6JW_Um"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "An objective of this work is to conduct NER task using NLTK and SpaCy. Firstly, the sentences would be tokenized, then tokens would be annotated by PoS and then we would be able to recognize NE.\n",
        "\n",
        "After that, a knowledge graph would be built to visualize relations between named entities."
      ],
      "metadata": {
        "id": "4r1ZwiBHXBxl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "But for subsequent NLTK and SpaCy annotation we need just text so let's derive it."
      ],
      "metadata": {
        "id": "Aw5teamdBONr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sentences = df.groupby('Sentence_ID')['Entity'].apply(lambda x: ' '.join(x)).tolist()\n",
        "\n",
        "sentences[:5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W2OSW5rPns4h",
        "outputId": "bc4a4fa8-592d-4d1a-ec1f-50017ca2249d"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['EU rejects German call to boycott British lamb .',\n",
              " 'Peter Blackburn',\n",
              " 'BRUSSELS 1996-08-22',\n",
              " 'The European Commission said on Thursday it disagreed with German advice to consumers to shun British lamb until scientists determine whether mad cow disease can be transmitted to sheep .',\n",
              " \"Germany 's representative to the European Union 's veterinary committee Werner Zwingmann said on Wednesday consumers should buy sheepmeat from countries other than Britain until the scientific advice was clearer .\"]"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## NLTK"
      ],
      "metadata": {
        "id": "ShtaL5ycKwq4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's count how many sentences there are."
      ],
      "metadata": {
        "id": "WQ0VWZ7TBnPc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "len(sentences)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZfyD5qAjOXqG",
        "outputId": "fd658866-f752-43f8-dfb2-20b1666ca618"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "14041"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Then we would use NLTK annotation that consists of tokenization, POS_tagging and NE_chunking. After annotation we would create a DataFrame"
      ],
      "metadata": {
        "id": "49CmUJ3XBtEt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "all_df = pd.DataFrame()\n",
        "\n",
        "for i, sentence in enumerate(sentences[:20]):\n",
        "    words = nltk.word_tokenize(sentence)\n",
        "    pos_tags = nltk.pos_tag(words)\n",
        "    chunks_ne = nltk.ne_chunk(pos_tags)\n",
        "\n",
        "    entities = []\n",
        "    labels = []\n",
        "\n",
        "    for chunk in chunks_ne:\n",
        "        if hasattr(chunk, 'label'):\n",
        "            entities.append(' '.join(word[0] for word in chunk))\n",
        "            labels.append(chunk.label())\n",
        "        else:\n",
        "            continue\n",
        "\n",
        "    entities_labels = list(set(zip(entities, labels)))\n",
        "    df = pd.DataFrame(entities_labels, columns=['Entities', 'Labels'])\n",
        "    df['Sentence_ID'] = i\n",
        "    all_df = pd.concat([all_df, df], ignore_index=True)"
      ],
      "metadata": {
        "id": "EpdkZBu5rOKz"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's look inside."
      ],
      "metadata": {
        "id": "jkN-cyUqCwPB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "all_df.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "TMM-cyqD3Mg6",
        "outputId": "b1722f1c-efa0-493a-bb20-08750c901e83"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Entities Labels  Sentence_ID\n",
              "43  British    GPE           17\n",
              "44     Bonn    GPE           17\n",
              "45  Britain    GPE           18\n",
              "46  Germany    GPE           18\n",
              "47  British    GPE           19"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d6e2694e-9973-4b58-a737-8c1f3b1d079d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entities</th>\n",
              "      <th>Labels</th>\n",
              "      <th>Sentence_ID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>British</td>\n",
              "      <td>GPE</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>Bonn</td>\n",
              "      <td>GPE</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>Britain</td>\n",
              "      <td>GPE</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>Germany</td>\n",
              "      <td>GPE</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>British</td>\n",
              "      <td>GPE</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6e2694e-9973-4b58-a737-8c1f3b1d079d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d6e2694e-9973-4b58-a737-8c1f3b1d079d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d6e2694e-9973-4b58-a737-8c1f3b1d079d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8baaa0c7-67ae-41b1-bff9-cc72cd7216ec\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8baaa0c7-67ae-41b1-bff9-cc72cd7216ec')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8baaa0c7-67ae-41b1-bff9-cc72cd7216ec button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"all_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Entities\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Bonn\",\n          \"Germany\",\n          \"British\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Labels\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"GPE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sentence_ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 17,\n        \"max\": 19,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## SpaCy"
      ],
      "metadata": {
        "id": "KgKxe8DNJN5o"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's proceed to SpaCy and its pre-trained pipeline ***en_core_web_sm*** that is able to perform NER.\n"
      ],
      "metadata": {
        "id": "1-1I0p1tC73C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nlp = spacy.load(\"en_core_web_sm\")"
      ],
      "metadata": {
        "id": "TCAGrhGJPKUK"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "It consists of next modules."
      ],
      "metadata": {
        "id": "CyMydlC9Jiy_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nlp.pipe_names"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jTDlHJvdJiWS",
        "outputId": "3160a4a7-e5db-4076-ee7e-7b824ba1afb1"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['tok2vec', 'tagger', 'parser', 'attribute_ruler', 'lemmatizer', 'ner']"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "These are the labels that it uses for NER."
      ],
      "metadata": {
        "id": "2-ml7J1ODyQD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nlp.pipe_labels['ner']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XnflwvnzPM1s",
        "outputId": "da6422bf-28d5-4708-cc35-54fc485fcf2b"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['CARDINAL',\n",
              " 'DATE',\n",
              " 'EVENT',\n",
              " 'FAC',\n",
              " 'GPE',\n",
              " 'LANGUAGE',\n",
              " 'LAW',\n",
              " 'LOC',\n",
              " 'MONEY',\n",
              " 'NORP',\n",
              " 'ORDINAL',\n",
              " 'ORG',\n",
              " 'PERCENT',\n",
              " 'PERSON',\n",
              " 'PRODUCT',\n",
              " 'QUANTITY',\n",
              " 'TIME',\n",
              " 'WORK_OF_ART']"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's annotate our sentences with NE and their relations."
      ],
      "metadata": {
        "id": "xTgQsbH9D-z4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "docs = []\n",
        "\n",
        "for i, sentence in enumerate(sentences[:100]):\n",
        "    doc = nlp(sentence)\n",
        "    entities = [ent for ent in doc.ents]\n",
        "    triplets = []\n",
        "    for ent1, ent2 in combinations(entities, 2):\n",
        "        if ent1.end < ent2.start:\n",
        "            span = doc[ent1.end:ent2.start]\n",
        "        else:\n",
        "            span = doc[ent2.end:ent1.start]\n",
        "        for token in span:\n",
        "            if token.dep_ in ('ROOT', 'relcl', 'attr', 'prep', 'agent', 'nsubj', 'dobj'):\n",
        "                triplets.append((ent1.text, token.lemma_, ent2.text))\n",
        "                break\n",
        "    docs.append((i, doc, triplets))"
      ],
      "metadata": {
        "id": "qScbd1A8Eeuy"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "And look inside."
      ],
      "metadata": {
        "id": "rzu4GUCqEGKA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for doc in docs[:5]:\n",
        "    print(doc[0])\n",
        "    print(doc[1].ents)\n",
        "    print(doc[2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VIBIADJLD-H1",
        "outputId": "28812e04-59ca-4bdf-aacc-9a7951cbc971"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "(EU, German, British)\n",
            "[('EU', 'reject', 'German'), ('EU', 'reject', 'British'), ('German', 'call', 'British')]\n",
            "1\n",
            "(Peter Blackburn,)\n",
            "[]\n",
            "2\n",
            "(BRUSSELS, 1996-08-22)\n",
            "[]\n",
            "3\n",
            "(The European Commission, Thursday, German, British)\n",
            "[('The European Commission', 'say', 'Thursday'), ('The European Commission', 'say', 'German'), ('The European Commission', 'say', 'British'), ('Thursday', 'it', 'German'), ('Thursday', 'it', 'British'), ('German', 'to', 'British')]\n",
            "4\n",
            "(Germany, the European Union 's, Werner Zwingmann, Wednesday, Britain)\n",
            "[('Germany', 'representative', \"the European Union 's\"), ('Germany', 'representative', 'Werner Zwingmann'), ('Germany', 'representative', 'Wednesday'), ('Germany', 'representative', 'Britain'), (\"the European Union 's\", 'say', 'Wednesday'), (\"the European Union 's\", 'say', 'Britain'), ('Werner Zwingmann', 'say', 'Wednesday'), ('Werner Zwingmann', 'say', 'Britain'), ('Wednesday', 'consumer', 'Britain')]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's see the length of given docs"
      ],
      "metadata": {
        "id": "muhYcjZbzwBz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "After that, it would be useful to observe how the model annotated the data and what is the meaning of given labels."
      ],
      "metadata": {
        "id": "w-lzRKTEEKoA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for doc in docs[:5]:\n",
        "    for ents in doc[1].ents:\n",
        "        print(ents, \"-->\", ents.label_, \"-->\", spacy.explain(ents.label_))"
      ],
      "metadata": {
        "id": "JIZVY03TPPht",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0c4f23f7-875e-4270-951a-eb37da88e263"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "EU --> ORG --> Companies, agencies, institutions, etc.\n",
            "German --> NORP --> Nationalities or religious or political groups\n",
            "British --> NORP --> Nationalities or religious or political groups\n",
            "Peter Blackburn --> PERSON --> People, including fictional\n",
            "BRUSSELS --> GPE --> Countries, cities, states\n",
            "1996-08-22 --> DATE --> Absolute or relative dates or periods\n",
            "The European Commission --> ORG --> Companies, agencies, institutions, etc.\n",
            "Thursday --> DATE --> Absolute or relative dates or periods\n",
            "German --> NORP --> Nationalities or religious or political groups\n",
            "British --> NORP --> Nationalities or religious or political groups\n",
            "Germany --> GPE --> Countries, cities, states\n",
            "the European Union 's --> ORG --> Companies, agencies, institutions, etc.\n",
            "Werner Zwingmann --> PERSON --> People, including fictional\n",
            "Wednesday --> DATE --> Absolute or relative dates or periods\n",
            "Britain --> GPE --> Countries, cities, states\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "After that, we would continue with creating a whole DataFrame using the attributes of ***en_core_web_sm*** annotation."
      ],
      "metadata": {
        "id": "YQpDT87-EvmY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "entities_doc = []\n",
        "labels_doc = []\n",
        "description = []\n",
        "start_position = []\n",
        "end_position = []\n",
        "sentence_id = []\n",
        "\n",
        "for doc in docs:\n",
        "    for ents in doc[1].ents:\n",
        "        sentence_id.append(doc[0])\n",
        "        entities_doc.append(ents)\n",
        "        labels_doc.append(ents.label_)\n",
        "        description.append(spacy.explain(ents.label_))\n",
        "        start_position.append(ents.start_char)\n",
        "        end_position.append(ents.end_char)\n",
        "\n",
        "ner_spacy = list(zip(sentence_id, entities_doc, labels_doc, description, start_position, end_position))\n",
        "df_spacy = pd.DataFrame(ner_spacy)\n",
        "df_spacy.columns = ['Sentence_ID', 'Entities','Labels','Description','Starting Position','Ending Position']\n",
        "df_spacy.head()"
      ],
      "metadata": {
        "id": "DfC-B71vPSe-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "b3823e51-9ba9-4ef1-c771-b035b3ebce22"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Sentence_ID            Entities  Labels  \\\n",
              "0            0                (EU)     ORG   \n",
              "1            0            (German)    NORP   \n",
              "2            0           (British)    NORP   \n",
              "3            1  (Peter, Blackburn)  PERSON   \n",
              "4            2          (BRUSSELS)     GPE   \n",
              "\n",
              "                                      Description  Starting Position  \\\n",
              "0         Companies, agencies, institutions, etc.                  0   \n",
              "1  Nationalities or religious or political groups                 11   \n",
              "2  Nationalities or religious or political groups                 34   \n",
              "3                     People, including fictional                  0   \n",
              "4                       Countries, cities, states                  0   \n",
              "\n",
              "   Ending Position  \n",
              "0                2  \n",
              "1               17  \n",
              "2               41  \n",
              "3               15  \n",
              "4                8  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c4706e94-d9e1-4b4d-be72-dc12e44bcb51\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sentence_ID</th>\n",
              "      <th>Entities</th>\n",
              "      <th>Labels</th>\n",
              "      <th>Description</th>\n",
              "      <th>Starting Position</th>\n",
              "      <th>Ending Position</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>(EU)</td>\n",
              "      <td>ORG</td>\n",
              "      <td>Companies, agencies, institutions, etc.</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>(German)</td>\n",
              "      <td>NORP</td>\n",
              "      <td>Nationalities or religious or political groups</td>\n",
              "      <td>11</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>(British)</td>\n",
              "      <td>NORP</td>\n",
              "      <td>Nationalities or religious or political groups</td>\n",
              "      <td>34</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>(Peter, Blackburn)</td>\n",
              "      <td>PERSON</td>\n",
              "      <td>People, including fictional</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>(BRUSSELS)</td>\n",
              "      <td>GPE</td>\n",
              "      <td>Countries, cities, states</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4706e94-d9e1-4b4d-be72-dc12e44bcb51')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c4706e94-d9e1-4b4d-be72-dc12e44bcb51 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c4706e94-d9e1-4b4d-be72-dc12e44bcb51');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c4f3ae0c-28d1-4dde-8cc8-3c5496d5b310\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c4f3ae0c-28d1-4dde-8cc8-3c5496d5b310')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c4f3ae0c-28d1-4dde-8cc8-3c5496d5b310 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_spacy",
              "summary": "{\n  \"name\": \"df_spacy\",\n  \"rows\": 254,\n  \"fields\": [\n    {\n      \"column\": \"Sentence_ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 94,\n        \"samples\": [\n          41,\n          23,\n          56\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Entities\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 254,\n        \"samples\": [\n          \"1996-08-22\",\n          \"The European Commission\",\n          \"Kathy Etchingham\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Labels\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"TIME\",\n          \"MONEY\",\n          \"ORG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"Times smaller than a day\",\n          \"Monetary values, including unit\",\n          \"Companies, agencies, institutions, etc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Starting Position\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53,\n        \"min\": 0,\n        \"max\": 250,\n        \"num_unique_values\": 119,\n        \"samples\": [\n          156,\n          227,\n          32\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ending Position\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54,\n        \"min\": 2,\n        \"max\": 256,\n        \"num_unique_values\": 120,\n        \"samples\": [\n          52,\n          37,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We also can observe it right in the text."
      ],
      "metadata": {
        "id": "39vUtzqfKoK8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's also work with relations between entities."
      ],
      "metadata": {
        "id": "tTWWT2sSmVJd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for doc in docs[:5]:\n",
        "    displacy.render(doc[1], style='ent')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 227
        },
        "id": "wHpY1Slz0D1k",
        "outputId": "ebb53a0b-a8f9-4f96-d079-0d7ce6ab34d5"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<span class=\"tex2jax_ignore\"><div class=\"entities\" style=\"line-height: 2.5; direction: ltr\">\n",
              "<mark class=\"entity\" style=\"background: #7aecec; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    EU\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">ORG</span>\n",
              "</mark>\n",
              " rejects \n",
              "<mark class=\"entity\" style=\"background: #c887fb; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    German\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">NORP</span>\n",
              "</mark>\n",
              " call to boycott \n",
              "<mark class=\"entity\" style=\"background: #c887fb; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    British\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">NORP</span>\n",
              "</mark>\n",
              " lamb .</div></span>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<span class=\"tex2jax_ignore\"><div class=\"entities\" style=\"line-height: 2.5; direction: ltr\">\n",
              "<mark class=\"entity\" style=\"background: #aa9cfc; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    Peter Blackburn\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">PERSON</span>\n",
              "</mark>\n",
              "</div></span>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<span class=\"tex2jax_ignore\"><div class=\"entities\" style=\"line-height: 2.5; direction: ltr\">\n",
              "<mark class=\"entity\" style=\"background: #feca74; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    BRUSSELS\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">GPE</span>\n",
              "</mark>\n",
              " \n",
              "<mark class=\"entity\" style=\"background: #bfe1d9; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    1996-08-22\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">DATE</span>\n",
              "</mark>\n",
              "</div></span>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<span class=\"tex2jax_ignore\"><div class=\"entities\" style=\"line-height: 2.5; direction: ltr\">\n",
              "<mark class=\"entity\" style=\"background: #7aecec; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    The European Commission\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">ORG</span>\n",
              "</mark>\n",
              " said on \n",
              "<mark class=\"entity\" style=\"background: #bfe1d9; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    Thursday\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">DATE</span>\n",
              "</mark>\n",
              " it disagreed with \n",
              "<mark class=\"entity\" style=\"background: #c887fb; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    German\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">NORP</span>\n",
              "</mark>\n",
              " advice to consumers to shun \n",
              "<mark class=\"entity\" style=\"background: #c887fb; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    British\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">NORP</span>\n",
              "</mark>\n",
              " lamb until scientists determine whether mad cow disease can be transmitted to sheep .</div></span>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<span class=\"tex2jax_ignore\"><div class=\"entities\" style=\"line-height: 2.5; direction: ltr\">\n",
              "<mark class=\"entity\" style=\"background: #feca74; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    Germany\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">GPE</span>\n",
              "</mark>\n",
              " 's representative to \n",
              "<mark class=\"entity\" style=\"background: #7aecec; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    the European Union 's\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">ORG</span>\n",
              "</mark>\n",
              " veterinary committee \n",
              "<mark class=\"entity\" style=\"background: #aa9cfc; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    Werner Zwingmann\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">PERSON</span>\n",
              "</mark>\n",
              " said on \n",
              "<mark class=\"entity\" style=\"background: #bfe1d9; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    Wednesday\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">DATE</span>\n",
              "</mark>\n",
              " consumers should buy sheepmeat from countries other than \n",
              "<mark class=\"entity\" style=\"background: #feca74; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    Britain\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">GPE</span>\n",
              "</mark>\n",
              " until the scientific advice was clearer .</div></span>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "entities_1 = []\n",
        "entities_2 = []\n",
        "relations = []\n",
        "sentence_ids = []\n",
        "\n",
        "for doc in docs:\n",
        "    for triplet in doc[2]:\n",
        "        entities_1.append(triplet[0])\n",
        "        entities_2.append(triplet[2])\n",
        "        relations.append(triplet[1])\n",
        "        sentence_ids.append(doc[0])\n",
        "\n",
        "triplets = list(zip(sentence_ids, entities_1, relations, entities_2))\n",
        "df_triplets = pd.DataFrame(triplets, columns=[['Sentence_ID', 'Entity_1', 'Relation', 'Entity_2']])\n",
        "df_triplets.iloc[24:36]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "id": "yIi2bw6vOoOo",
        "outputId": "b0d764ba-d436-434c-8ccf-a165a7661559"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Sentence_ID  Entity_1 Relation                          Entity_2\n",
              "24           8  Fischler  propose                                EU\n",
              "25           8  Fischler  propose                           Britain\n",
              "26           8  Fischler  propose                            France\n",
              "27           8  Fischler  propose  Bovine Spongiform Encephalopathy\n",
              "28           8  Fischler  propose                               BSE\n",
              "29           8        EU  measure                           Britain\n",
              "30           8        EU  measure                            France\n",
              "31           8        EU  measure  Bovine Spongiform Encephalopathy\n",
              "32           8        EU  measure                               BSE\n",
              "33           8   Britain    under  Bovine Spongiform Encephalopathy\n",
              "34           8   Britain    under                               BSE\n",
              "35           8    France    under  Bovine Spongiform Encephalopathy"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b079373d-e77f-474b-8a1b-6044520d56d9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>Sentence_ID</th>\n",
              "      <th>Entity_1</th>\n",
              "      <th>Relation</th>\n",
              "      <th>Entity_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>8</td>\n",
              "      <td>Fischler</td>\n",
              "      <td>propose</td>\n",
              "      <td>EU</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>8</td>\n",
              "      <td>Fischler</td>\n",
              "      <td>propose</td>\n",
              "      <td>Britain</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>8</td>\n",
              "      <td>Fischler</td>\n",
              "      <td>propose</td>\n",
              "      <td>France</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>8</td>\n",
              "      <td>Fischler</td>\n",
              "      <td>propose</td>\n",
              "      <td>Bovine Spongiform Encephalopathy</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>8</td>\n",
              "      <td>Fischler</td>\n",
              "      <td>propose</td>\n",
              "      <td>BSE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>8</td>\n",
              "      <td>EU</td>\n",
              "      <td>measure</td>\n",
              "      <td>Britain</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>8</td>\n",
              "      <td>EU</td>\n",
              "      <td>measure</td>\n",
              "      <td>France</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>8</td>\n",
              "      <td>EU</td>\n",
              "      <td>measure</td>\n",
              "      <td>Bovine Spongiform Encephalopathy</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>8</td>\n",
              "      <td>EU</td>\n",
              "      <td>measure</td>\n",
              "      <td>BSE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>8</td>\n",
              "      <td>Britain</td>\n",
              "      <td>under</td>\n",
              "      <td>Bovine Spongiform Encephalopathy</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>8</td>\n",
              "      <td>Britain</td>\n",
              "      <td>under</td>\n",
              "      <td>BSE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>8</td>\n",
              "      <td>France</td>\n",
              "      <td>under</td>\n",
              "      <td>Bovine Spongiform Encephalopathy</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b079373d-e77f-474b-8a1b-6044520d56d9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b079373d-e77f-474b-8a1b-6044520d56d9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b079373d-e77f-474b-8a1b-6044520d56d9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ae686083-82bd-457b-8a9f-26c4259d353c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ae686083-82bd-457b-8a9f-26c4259d353c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ae686083-82bd-457b-8a9f-26c4259d353c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_triplets\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": [\n        \"Sentence_ID\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 8,\n        \"max\": 8,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Entity_1\"\n      ],\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"EU\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Relation\"\n      ],\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"propose\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Entity_2\"\n      ],\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Britain\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Visualisation"
      ],
      "metadata": {
        "id": "b2lzlBszx6ad"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_filtered = df_triplets.iloc[24:36]\n",
        "\n",
        "G = nx.DiGraph()\n",
        "\n",
        "for _, row in df_filtered.iterrows():\n",
        "    G.add_edge(row['Entity_1'], row['Entity_2'], label=row['Relation'])"
      ],
      "metadata": {
        "id": "tzODmrDuvPVy"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's build a Knowledge graph"
      ],
      "metadata": {
        "id": "ug0TIsRiwGA_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(14, 8))\n",
        "pos = nx.spring_layout(G, k=0.5, seed=42)\n",
        "nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=3000, font_size=10, edge_color='gray', arrows=True)\n",
        "\n",
        "edge_labels = nx.get_edge_attributes(G, 'label')\n",
        "nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color='darkred')\n",
        "\n",
        "plt.title(\"Knowledge Graph (Sentence 8)\", fontsize=14)\n",
        "plt.axis('off')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 860
        },
        "id": "DPewDLbmwFnY",
        "outputId": "5521e6cf-cbeb-464b-c838-b21b98f66884"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABYwAAANLCAYAAADiktntAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQABAABJREFUeJzs3Xtc1vX9//HnxRkEREE8i3hCReQgyuHCAyqYpaWyrb6da/u2rVZrp9a2vuu0trWttmpt1dpqa611ADPtBCqiXBw9K54PqCgIchCQ83V9fn+U/DI1T8AH5HG/3bptfa7P9fk8PxdXWz1593pbDMMwBAAAAAAAAADo9ZzMDgAAAAAAAAAA6B4ojAEAAAAAAAAAkiiMAQAAAAAAAACfozAGAAAAAAAAAEiiMAYAAAAAAAAAfI7CGAAAAAAAAAAgicIYAAAAAAAAAPA5CmMAAAAAAAAAgCQKYwAAAAAAAADA5yiMAQAATLZmzRpZLBY99thjnXaPWbNmyWKxdNr1e5PXX39dFotFr7/+eodd809/+pPc3NxUXFzcYdeEOV599VU5Oztr27ZtZkcBAAC4LBTGAACgRykuLpbFYtE111xzztefe+45OTk5acSIEdq9e3cXp8Olqqmp0dNPP62ZM2cqMDBQrq6u6tu3r6KiovTAAw8oPz/f7Iidrrq6Wk8++aTuvvtujRw58ozXKisr9fDDDys0NFReXl7y8vJSUFCQ5syZo8cff1zHjx/v0qy99RcPe/fu1V133aWxY8fK09NTQ4cOVVJSkj744IOzzr3jjjsUFBSkn/zkJyYkBQAAuHIUxgAA4Krxy1/+Ug8++KBCQkJks9kUEhJidiR8hdWrV2vs2LF6+OGHVVpaquuvv14PPfSQ7rrrLgUEBOhvf/ubYmNj9dxzz5kdtVP98Y9/VFVV1VkFY0lJiSIjI/X000/Lzc1Nd911l37wgx9ozpw5Onr0qB577DFWsXaB/Px8hYeH69///rcmT56s73//+5o3b54KCwt1ww036PHHHz/jfFdXV/3gBz/Qp59+KpvNZlJqAACAy+didgAAAIArZRiG7r//fr344ouKjo7Wxx9/rICAALNj4Sts3rxZCxYskMVi0RtvvKFbbrnlrJWrVVVV+tOf/qTa2lqTUna+trY2vfrqq7JarRo9evQZrz366KM6cuSInnjiCf3f//3fWe/dtm2b/Pz8uihp7/X444+rsbFR77//vm644Yb2448++qjCwsL09NNP6+GHH5a7u3v7azfddJN++MMf6qWXXpLVajUjNgAAwGVjhTEAAOjRWltbdeutt+rFF1/U7NmztXr16rPK4jvvvFMWi0UHDx7U888/r/Hjx8vd3V1BQUF6/PHH5XA4zrpuW1ubnn32WYWHh8vT01N9+/ZVYmKili9ffsZ5W7ZskcVi0fe+970zjr///vuyWCxyd3dXQ0PDGa+NHDlSwcHBF/V85eXl+sEPfqAxY8bI3d1dAQEBSklJ0fbt2895fnZ2tmbOnKk+ffrI399fN954o44cOXLe6584cUL33HOPAgMD5eXlpalTp2rp0qVfOad369atuummmzR48GC5ubkpKChI999/vyorKy/qmSTpgQceUGNjo1588UXdeuut5xxz0L9/fz3xxBP62c9+dsbx02MRmpqa9Mgjj2j06NFydXVtnwG9Z88ePfTQQ4qKipK/v788PDw0btw4Pfzww6qvrz/rPl+83sMPP6wRI0bIw8NDEyZM0AsvvCDDMM77HOnp6YqPj5eXl5f8/f11xx13XNLn8Mknn6i0tFRf//rXz3otNzdXknT//fef871hYWEaPnz4WccPHjyob33rWxoxYoTc3d01ePBg3XnnnTp06NBZ51osFs2aNUvHjx/XHXfcoYCAAHl6eio2NlZr1qw569ysrKz2/376jzvvvPOM8y72+3F6vMydd96pffv2afHixerXr5/69OmjuXPnasuWLed87vLycv3oRz9SSEiIPD091b9/f8XExOgPf/jDWed2xHf1wIEDslgsmj9//hnHg4KCFBYWpsbGxrO+VwMGDNCsWbP03nvvnfM7BwAA0J2xwhgAAPRYjY2N+trXvqaPPvpIixcv1ltvvXXGKr8v+8lPfqKsrCwtWLBA8+bN0/vvv6/HHntMLS0teuqpp9rPMwxDX/va17Rs2TKNGzdO9913n06dOqW3335b119/vZ599ln94Ac/kCRNnjxZ/v7+yszMPONep/+8paVFNptNSUlJkj4r8w4dOqS77rrrgs+3f/9+zZo1SyUlJUpOTtaiRYtUXl6u1NRUffrpp1q1apViYmLaz1+1apXmz58vJycn3XjjjRoyZIhWrVolq9Wqfv36nXX9+vp6zZw5Uzt27FB8fLxmzJihkpIS3XTTTZo3b945M33wwQf6xje+IScnJ91www0aPny4duzYoT//+c/69NNPlZ+ff857fdHevXu1bt06jRgxQrfffvsFPwcXl3P/LWtKSoq2bNmia665Rn5+fu0lfFpamv7+978rMTFRs2bNksPhUF5enp5++mllZWVp7dq1cnV1Pet63/jGN7Rp0yalpKRIklJTU/XAAw+ouLhYzzzzzDk/iw8//FALFy5UfHy81q5dq3/961/av3+/srOzL/hc0mc/M0mKjY096zV/f39JnxXg06ZNu6jr5efna968eTp16pQWLFigsWPHqri4WG+++aY+/vhj5ebmatSoUWe8p6amRgkJCerbt69uu+02lZeX6+2339a8efO0YcMGTZo0SdJnK2pff/11HTp0SI8++mj7+yMiIs74TC71+1FcXKzY2FiFhobq7rvv1v79+7Vs2TIlJiZq586dGjhwYPu5u3fvVmJiokpLS5WQkKBFixbp1KlTKioq0q9//Wv9+Mc/vqIs5zJp0iTt3r1bH3/88RkrjA8fPqxt27YpPDy8/Wf1RXFxcVq5cqVycnKUnJx8wfsAAAB0GwYAAEAPcvDgQUOSERcXZyQkJBiSjLvvvttoa2s773vuuOMOQ5IRHBxsHDt2rP14RUWF4efnZ/j4+BjNzc3tx//5z38akoyZM2eecfzQoUNGQECA4eLiYuzfv7/9+JIlSwxJRllZWfuxsLAwY/r06Yabm5vxs5/9rP343//+d0OS8a9//av9WGZmpiHJePTRR8/IHR8fbzg7OxuffPLJGcd3795t+Pj4GGFhYe3H7Ha7MWrUKMNisRjr1q1rP+5wOIybb77ZkGR8+W/9HnnkEUOScc8995xxfOXKle3nv/baa+3HT5w4Yfj6+hpDhw41iouLz3jPW2+9ZUgyvve97xkXcvrzve222y547rnMnDnTkGREREQYlZWVZ71eUlJyxs/ttMcff9yQZPz73/8+5/VCQkKMmpqa9uM1NTVGSEiIYbFYjMLCwvbjr732miHJcHFxMbKzs9uPt7W1GbNmzTIkGbm5uRf1LFOnTjWcnJyMpqams157/vnnDUlGYGCg8ctf/tLIzMw0Tp48ed5rtbS0GCNHjjR8fHyMjRs3nvHaunXrDGdnZ2PBggVnHD/9c7733nsNu93efvzVV181JBnf/va3zzj/9Gd1Lpf6/Tj917Ik47e//e0Z55/+bv7mN78543h0dLQhyXjllVfOuv+RI0cuO8tX2blzpzFo0CDDxcXFWLJkifHwww8bd999t+Hn52dEREQYu3fvPuf7li1bZkgyfvnLX17UfQAAALoLCmMAANCjfLFkOl0cX8jpwvgf//jHeV/bunVr+7HZs2cbkoz8/Pyzzn/qqacMScYTTzzRfuyFF14wJBlvvfWWYRifFdEWi8X4zW9+Y8yYMcOIiYlpP/fWW281JBmHDx9uP3auwnjjxo3tZfi5/PCHPzQkGdu2bTMMwzCysrIMScbChQvPOre4uNhwdnY+q+gbOXKk4ebmdkbRfVpycvJZhfGzzz57Vtn9RVFRUUZAQMA5X/uip59+2pBk/PSnPz3rterqauPRRx89448//vGPZ5xzurRctmzZBe/1RZWVlYYk48477zzn9b5cJBuGYbzxxhtnlYunC+Pbb7/9rPNPv/b8889fVKbBgwcb/fv3P+drDofD+MlPfmK4ubm1f98tFosxceJE46c//ekZv/wwDMNIS0s767v5RUuWLDGcnJzOKJ0lGX369DHq6urOOLe1tdVwcXExoqKizjj+VYXxpX4/Tv+1HBwcfEZZ/cXXlixZ0n4sPz/fkGTMmDHjnNe/kiwXUlxcbEydOvWM/+3x9/c3nnvuufP+siovL+8r/xoGAADorhhJAQAAeqSJEyeqpqZGubm5euKJJ/TLX/7ygu+ZMmXKWceGDRsm6bN/Lf+0TZs2ycvL65xjABITEyV9tmnbl49lZmbqpptu0po1a2QYhmbPnq2mpiY99dRTqqurk4+PjzIzMzV69Ohzzp79ory8PEnS8ePH22fzftGuXbva/3PSpEnt816nT59+1rlBQUEaPny4iouL24/V1taquLhYEydOPONf+T/NarUqPT39nJny8/O1f//+s97T1NSkEydO6MSJE5e96WBNTY0ef/zxs/I/+OCDZ517vjENhmHotdde0+uvv67t27fr5MmTZ8ypPnbs2Dnfd67P7vSxTZs2nfXaxX6fvkplZWX7e77MYrHod7/7nR566CF99NFHysvL0/r167Vhwwbt2LFDL7/8sj755JP2sSSnfz67d+8+53emrKxMDodDe/bsUXR0dPvxcePGydvb+4xzXVxcNHDgwIt+ji/e/1K/HxEREXJyOnNrlXN9jgUFBZJ0UeMdOvK7WlBQoEWLFiksLEwbNmzQ+PHjVVZWpj//+c/6/ve/r+zsbL3zzjtnva9///6SPpsTDgAA0JNQGAMAgB5p+PDh7XNOH330Udnt9rOKxi/z9fU969jp+bh2u739WG1t7XkL3cGDB7efc1poaKgCAwPb5xZnZmbK19dXU6ZMUWNjox5//HGtW7dOY8eO1dGjR/Wtb33rgs9XVVUlSfrwww/14Ycfnve8U6dOSZJOnjwpSQoMDDzneQMHDjyrML7Q+efL9OKLL35l9lOnTn1lCXf62ucqbkeOHHnGJnMeHh4XvM6XPfDAA/rzn/+s4cOH6/rrr9fgwYPbZ1s//vjjam5uvujrnT52+vP9oov9Pn0VT09PNTU1feU5AQEBuv3229vnPZeVlel73/ueUlNTdc8997T/suD0z+fNN9/8yuud/s581XNInz3LxT7HF+9/qd+Pi/0cT/8Mhg4d2mlZvqy1tVU33XSTnJyctHTpUnl5eUmSRo0apWeffVYHDx7Uu+++K5vNJqvVesZ7GxsbJan9PQAAAD2F04VPAQAA6J7GjBmjrKwsjRgxQk888YQeeeSRDrmur6+vysvLz/laWVlZ+zlfNGvWLO3du1dHjx7VmjVrNGPGDDk7Oys2Nlaenp7KzMzUmjVrJP3/FckXyiBJL7zwgozPxoid84877rhDktS3b19JOm/u48ePn/P6F3v+F9+zbdu2r8wUFBT0lc8WHx8vScrKyjpj5e+lslgsZx0rLy/Xiy++qMmTJ2vXrl16/fXX9Zvf/EaPPfaYvvOd73zl9c71zKePnf58O9qAAQPay82LNWjQIL3xxhtyd3fX1q1bVVlZKen//3yWL1/+lT+fmTNndvhzfPH+V/r9OB8/Pz9J0tGjR7ssy65du3Tw4EHFxMScs/g9/dfyuVagn/65Dhgw4IJ5AQAAuhMKYwAA0KONGjVKa9asUVBQkJ566in97Gc/u+JrRkZGqqGhof1fgf+i06VvRETEGcdPF0dvvfWWduzYodmzZ0uS3N3dFR8fr9WrV7evQJ41a9YFM5weM5Cbm3tRmcPDwyVJ69atO+u1Q4cO6ciRI2cc8/X11ciRI7Vv375zlsY5OTlXnOl8xo4dq4SEBB0+fFj//ve/r+haX3bgwAEZhqG5c+eeVfCd67O50Ounj0VGRnZcyC8ICwtTU1OTDh8+fEnvc3d3l6ur6xnHOurn81WcnZ0lnXsFdWff//QIki+PSjmXjsrS0tIiSaqoqDjn66ePn17B/kW7d++W9NnPGAAAoCehMAYAAD1ecHCwsrKyFBwcrN/+9rd66KGHruh6p1ft/uxnP1Nra2v78SNHjujZZ5+Vi4uLbrnlljPec7ow/t3vfidJ7YXx6dc2b96s9PR0jRs3TkOGDLlghmnTpikmJkZvvfWW3n777bNedzgcysrKav/zhIQEBQcHa8WKFcrOzm4/bhiGfv7zn5+z4LvlllvU0tKiRx999Izja9as0aeffnrW+XfddZd8fHz0i1/8QkVFRWe93tDQ0D479kKef/55eXp66t5779Vbb711znNqa2vPGE9xMU6vGM3JyTlj9XJJSckFf5nw5JNPnjF64uTJk/rVr34li8XS/p3oaKdX++bn55/12jPPPNM+q/rL/vznP6u+vl7jx4+Xv7+/JOmGG27QiBEj9Oyzz2rt2rVnvae1tfWM78blOD2X98u/gJA69vtxLlOnTtXUqVO1du1a/e1vfzvr9S+uPO6oLJMmTZKvr69sNttZRfWRI0f08ssvy2KxnHPV9umfaWet6AYAAOgszDAGAABXhaCgIGVlZSkxMVG///3vZbfb9cwzz1zWtW677TalpaVp2bJlmjx5shYsWKBTp07p7bffVlVVlZ555hmNGjXqjPeEhIRo8ODBKi0tlb+/vyZPntz+WmJiohwOhyorK/W1r33tonO89dZbSkxM1E033aQ//elPioqKkqenpw4fPqzc3FxVVFS0z791cnLSK6+8omuvvVZz587VjTfeqCFDhmj16tUqLS3V5MmTtXXr1jOu/9Of/lSpqal66aWXtH37dk2fPl0lJSV65513tHDhQi1fvvyMzcgGDBigt956S1//+tcVHh6ua665RuPHj1dzc7OKi4uVlZWl+Ph4ffLJJxd8tsjISK1YsUI33nijbr75Zj366KOaMWOGBg4cqLq6Oh0+fFjp6elqaWlRQkLCRX9mgwcPVkpKilJTUxUdHa05c+bo+PHjWrFihebMmXPODdBOGzdunCZNmqSUlBRJUmpqqkpKSvTDH/7wjE3iOtINN9ygH/7wh8rIyNDXv/71M15744039OMf/1hhYWGKiYlRYGCgampqlJeXp40bN8rT01N//etf2893d3fXe++9p/nz52vmzJmaPXu2wsLC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+/DtKs9fPX8ejk5OvPLtT/zhpf+9hnP/+x/ue+EVXpn1E9ln0vjPH//Awi+n88c33ue5j2eya8MaFn/92WVfqyuxb8tGzpw6wd+/nMejr73Nqh/nsurHudbH333mMdYvms+9z/+Tdxav4Q9/fx0390YAFBfk8+JdE+gSGcX27dtZunQpGRkZ3HrrrRe83o6OjmzdupV33nmHN998kxkzZlQ55z//+Q/du3fHYDDw0EMP8eCDD3Lo0CHr456ennzxxRfs37+fd955h+nTp/PWW29d8r7eeecd/vOf//DGG2+we/duRowYwdixYzly5EiV8y7382Q2m2nevDnz5s1j//79/O1vf+O5555j7txzr89TTz3Frbfeyg033EB6ejrp6en07dvXeu3nn3+ep556iqSkJNq2bcvkyZOprKykUaNGTJo0yfrpgKullhQiIiIiIiIiv6Eht6L4NbWmaFgWLlyIh4cHcC4cDgoKYuHChdYdpN9++y1lZWV89dVXNGp0LuT773//S1xcHK+//jqBgYFMmjSJb7/9lnvvvReAFStWkJeXxy233HLJdc1mM1988QWenudaHUyZMoUVK1bwyiuvUF5ezr/+9S+WL19Onz59AAgPD2f9+vV8/PHHDBo06ILrNWvWjHfffZenn36av//973Tv3p0hQ4Zw++23Ex4eXuXcRx55xFrbhx9+yNKlS/n00095+umn+eCDDwgJCeG///0vdnZ2REREkJaWxjPPPMPf/vY36+vSpUsXXnzxRQDatGnDf//7X1asWEGvgYPZvXEtGadO8I+vvre2nZj8x2f4xz2TLvpaWNtT2Nnh7uFpfc53H76Df9Ng7nvhX9jZ2dE8vA1nMzOY+cYrTHj4T9ZagkLDuPPPL1ivd76/8OQ/Pk1E154ADLtlEt+8+SrvJ26iaUhLAPqMGMPeLRu5adojl/w+Adw/uFuVvwcEN+edhautf2/k5c19L7yCg4MDzcPb0HXQcPZsXkfMrbeTdiyFjUvi+dtns4nsOxDAuj7Akm8+J6x9J174x8t4uTgB8NlnnxESEsLhw4dp27YtACEhIbz11lvY2dnRrl079uzZw1tvvcW0adOs1xo1ahQPPfQQcG438VtvvcWqVato164dAH/961+t54aGhvLUU08xe/Zsnn766Yve9xtvvMEzzzzDpEnnvm+vv/46q1at4u233+b999+3nne5nycnJyf+/ve/W88NCwtj06ZNzJ07l1tvvRUPDw/c3NwoLy+nadOmF9Tw1FNPMXr0aAD+/ve/07FjR5KTk4mIiOC+++6jb9++pKenExQURGZmJk2aNLngGhejHcYiIiIiIiIil2GxWDCcybd1GXWK4Uz+BR/3luvTkCFDSEpKIikpia1btzJixAhGjhzJiRMnADhw4ACRkZHWsBigX79+mM1m6+7N22+/ndWrV5OWlgbAN998w+jRo6u0ofi10NBQa1gMWAMvgOTkZEpKSoiJicHDw8P656uvviIlJeWS13z44Yc5c+YM33zzDX369GHevHl07NiRxMTEKuedD6EBHB0d6d69OwcOHLDeb58+fbCzs6tyv0VFRaSmppKamsqZM2do2rQpRuP/hrWdr99kgdPHUvBvGlylR3GbLtGXrPtSTh89QruoblVqiejag7KSYnLOpFmPterY5aLPb9mug/VrH//GuLi5VQlrvf0DyM/NvthTq3j56x9548dE65/nP/66yuMhbdrh4OBg/btv4ybk/7zD9tjBfdg7ONCxRx8u5vjB/ezbupFgf1/r9zki4twgwF9+r3v37l3ldejTpw9Hjhypspu8S5f/vQ52dnY0bdrU+jMFMGfOHPr160fTpk3x8PDgr3/96yV7dRcUFJCWlka/fv2qHO/Xr5/1Z+WXtZz3658ngPfff59u3brRuHFjPDw8+OSTT664R/gv7ykoKAjAek89e/akY8eOfPnllwB8/fXXF17gEhQYi4iIiIiIiFxGdqmRoorLf4S9oSmqMJFdavztE6Xea9SoEa1bt6Z169b06NGDGTNmUFxczPTp06/4Gj169KBVq1bMnj2b0tJSfvzxx8u2owBwcnKq8nc7OzvMP/fPPt8fedGiRdYwOykpif379/9mz1ZPT0/i4uJ45ZVX2LVrFwMGDLigncS1yMrKoqysjFOnTvGf//yHpUuXkpuba63fbIM3Wlzc3C963NHxF40H7OxwcLzwNbdcQc/ywOYtCGoZZv3TpFnzKo87OFZtcPDL6zq7uF722mUlxXQbHMOqzVurfK+PHDnCwIEDf7O2X7rcz9SmTZu4/fbbGTVqFAsXLsRgMPD8889XCf1rwuzZs3nqqae49957SUhIICkpibvvvvuK1/3lPZ0PzM2/+J7dd999fPHFFwBX1Z5CgbGI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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "displacy.render(docs[8][1], style='ent')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        },
        "id": "3gBQ9-Qz0ehu",
        "outputId": "b941f6ad-7c01-4fb1-e982-4cc1b17c50ee"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<span class=\"tex2jax_ignore\"><div class=\"entities\" style=\"line-height: 2.5; direction: ltr\">\n",
              "<mark class=\"entity\" style=\"background: #aa9cfc; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    Fischler\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">PERSON</span>\n",
              "</mark>\n",
              " proposed \n",
              "<mark class=\"entity\" style=\"background: #7aecec; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    EU\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">ORG</span>\n",
              "</mark>\n",
              "-wide measures after reports from \n",
              "<mark class=\"entity\" style=\"background: #feca74; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    Britain\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">GPE</span>\n",
              "</mark>\n",
              " and \n",
              "<mark class=\"entity\" style=\"background: #feca74; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    France\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">GPE</span>\n",
              "</mark>\n",
              " that under laboratory conditions sheep could contract \n",
              "<mark class=\"entity\" style=\"background: #aa9cfc; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    Bovine Spongiform Encephalopathy\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">PERSON</span>\n",
              "</mark>\n",
              " ( \n",
              "<mark class=\"entity\" style=\"background: #7aecec; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;\">\n",
              "    BSE\n",
              "    <span style=\"font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem\">ORG</span>\n",
              "</mark>\n",
              " ) -- mad cow disease .</div></span>"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}